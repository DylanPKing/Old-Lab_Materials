#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>
#include <algorithm>

#if !defined(GLUT_WHEEL_UP)
#  define GLUT_WHEEL_UP   3
#  define GLUT_WHEEL_DOWN 4
#endif

/*  Set initial size of the display window.  */
GLsizei winWidth = 600, winHeight = 600;  

int xClick, yClick, point = 5;
float myX = 0.0, myY = 0.0;
bool leftClicked = false, inRangeOfPoint = false;
GLdouble wX, wY, wZ;

class wcPt3D {
   public:
      GLfloat x, y, z;
};

const GLint nCtrlPts = 6;
wcPt3D ctrlPts [nCtrlPts] = 
{ 
	{-40.0, -40.0, 0.0}, {-10.0, 200.0, 0.0},
	{-40.0, -20.0, 0.0}, {40.0, 20.0, 0.0},
    {-10.0, -200.0, 0.0}, {40.0, 40.0, 0.0} 
};

/*  Set size of world-coordinate clipping window.  */
GLfloat xwcMin = -50.0, xwcMax = 50.0, minW, maxW;
GLfloat ywcMin = -50.0, ywcMax = 50.0, minY, maxY;

void initClip()
{
	for (int i = 0; i < nCtrlPts; ++i)
	{
		xwcMin = std::min(xwcMin, ctrlPts[i].x);
		xwcMax = std::max(xwcMax, ctrlPts[i].x);
		ywcMin = std::min(ywcMin, ctrlPts[i].y);
		ywcMax = std::max(ywcMax, ctrlPts[i].y);
	}
}

int btn;
int startMouseX = 0;
int startMouseY = 0;
int startTransX = 0;
int startTransY = 0;
int cursorTransX = 0;
int cursorTransY = 0;

wcPt3D* findNearestPoint(int x, int y)
{
	wcPt3D *point = &ctrlPts[0];
	float totalDistance, pDistance;
	for (int i = 0; i < nCtrlPts; ++i)
	{
		if (fabs(ctrlPts[i].x - fabs(x)) < 10 && fabs(ctrlPts[i].y - fabs(y)) < 10)
		{
			pDistance = totalDistance;
			totalDistance = fabs(ctrlPts[i].x - fabs(x)) + fabs(ctrlPts[i].y - fabs(y));
			if (totalDistance < pDistance)
				point = &ctrlPts[i];
		}
	}
	return point;
}

void getActualPosition(int x, int y)
{
	GLint viewportMat[4];
	GLdouble modelMat[16];
	GLdouble projectMat[16];
	GLint oglY;
	glGetIntegerv (GL_VIEWPORT, viewportMat);
    glGetDoublev (GL_MODELVIEW_MATRIX, modelMat);
    glGetDoublev (GL_PROJECTION_MATRIX, projectMat);
    oglY = viewportMat[3] - y - 1;
    gluUnProject(x, oglY, 0.0, modelMat, projectMat, viewportMat, &wX, &wY, &wZ);
}

void MouseCallback(int button, int state, int x, int y)
{
  	inRangeOfPoint = false;
  	leftClicked = (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN);
  	getActualPosition(x, y);
  	myX = wX, myY = wY;
    for (int i = 0; i < nCtrlPts; ++i)
    {
    	if(sqrt(pow(wX - ctrlPts[i].x, 2) + pow(wY - ctrlPts[i].y, 2)) < 10)
    	{
    		inRangeOfPoint = true;
    		point = i;
    		break;
    	}
    }
    
    switch (button)
	{
		case GLUT_WHEEL_UP :
			if (glutGetModifiers() == GLUT_ACTIVE_CTRL)
			{
				xwcMin += std::fabs(xwcMin * 0.01);
				ywcMin += std::fabs(ywcMin * 0.01);
				xwcMax -= std::fabs(xwcMax * 0.01);
				ywcMax -= std::fabs(ywcMax * 0.01);
			}
			break;
		case GLUT_WHEEL_DOWN :
			if (glutGetModifiers() == GLUT_ACTIVE_CTRL)
			{
				xwcMin -= std::fabs(xwcMin * 0.01);
				ywcMin -= std::fabs(ywcMin * 0.01);
				xwcMax += std::fabs(xwcMax * 0.01);
				ywcMax += std::fabs(ywcMax * 0.01);
			}
			break;
		default :
			break;
	}
    glutPostRedisplay();
}

void MotionCallback(int x, int y)
{
  	if (leftClicked && inRangeOfPoint)
  	{
  		getActualPosition(x, y);
  		ctrlPts[point].x += ((myX - wX) / -20);
  		ctrlPts[point].y += ((myY - wY) / -20);
  		glutPostRedisplay();
  	}
}

void init(void)
{
   /*  Set color of display window to white.  */
   glClearColor (1.0, 1.0, 1.0, 0.0);
}

void plotPoint (wcPt3D bezCurvePt)
{
	glBegin (GL_POINTS);
    	glVertex2f (bezCurvePt.x, bezCurvePt.y);
    glEnd ( );
}

/*  Compute binomial coefficients C for given value of n.  */
void binomialCoeffs (GLint n, GLint * C)
{
   GLint k, j;

   for (k = 0;  k <= n;  k++) {
      /*  Compute n!/(k!(n - k)!).  */
      C [k] = 1;
      for (j = n;  j >= k + 1;  j--)
        C [k] *= j;
      for (j = n - k;  j >= 2;  j--)
        C [k] /= j;
   }
}

void computeBezPt (GLfloat t, wcPt3D * bezPt, GLint nCtrlPts,
                    wcPt3D * ctrlPts, GLint * C)
{
   GLint k, n = nCtrlPts - 1;
   GLfloat bezBlendFcn;

   bezPt->x = bezPt->y = bezPt->z = 0.0;

   /*  Compute blending functions and blend control points. */
   for (k = 0; k < nCtrlPts; k++) {
      bezBlendFcn = C [k] * pow (t, k) * pow (1 - t, n - k);
      bezPt->x += ctrlPts [k].x * bezBlendFcn;
      bezPt->y += ctrlPts [k].y * bezBlendFcn;
      bezPt->z += ctrlPts [k].z * bezBlendFcn;
   }
}

void bezier (wcPt3D * ctrlPts, GLint nCtrlPts, GLint nBezCurvePts)
{
   wcPt3D bezCurvePt;
   GLfloat t;
   GLint *C;

   /*  Allocate space for binomial coefficients  */
   C = new GLint [nCtrlPts];

   binomialCoeffs (nCtrlPts - 1, C);
   for (int i = 0;  i <= nBezCurvePts;  i++) {
      t = GLfloat (i) / GLfloat (nBezCurvePts);
      computeBezPt (t, &bezCurvePt, nCtrlPts, ctrlPts, C);
      plotPoint (bezCurvePt);
   }
   delete [ ] C;
}
    
void displayFcn () 
{
    // Clear display window.
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT);   

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(xwcMin, xwcMax, ywcMin, ywcMax);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Set example number of control points and number of
    // curve positions to be plotted along the Bezier curve.
    GLint /*nCtrlPts = 4, */ nBezCurvePts = 1000;
    /*wcPt3D ctrlPts [4] = 
    { 
        {-40.0, -40.0, 0.0}, {-10.0, 200.0, 0.0},
        {10.0, -200.0, 0.0}, {40.0, 40.0, 0.0} 
    };*/

    // Set point color to red.
    glPointSize(8);
    glColor3f(1.0, 0.2, 0.4);      

	glBegin(GL_LINES);
		for (int i = 0; i < nCtrlPts - 1; ++i)
		{
			glVertex2f(ctrlPts[i].x, ctrlPts[i].y);
			glVertex2f(ctrlPts[i + 1].x, ctrlPts[i + 1].y);
		}
	glEnd();
    bezier(ctrlPts, nCtrlPts, nBezCurvePts);
    glutSwapBuffers();
}

void winReshapeFcn(GLint newWidth, GLint newHeight)
{
   /*  Maintain an aspect ratio of 1.0.  */
   int winSize = ((newWidth > newHeight) ? newHeight : newWidth);
   glViewport (0, 0, winSize, winSize);

   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ( );

   gluOrtho2D (xwcMin, xwcMax, ywcMin, ywcMax);

   glutPostRedisplay();
}

int main (int argc, char** argv)
{
   glutInit (&argc, argv);
   initClip();
   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowPosition (50, 50);
   glutInitWindowSize (winWidth, winHeight);
   glutCreateWindow ("Bezier Curve");

   init ( );
   glutDisplayFunc (displayFcn);
   glutReshapeFunc (winReshapeFcn);
   glutMouseFunc(MouseCallback);
   glutMotionFunc(MotionCallback);

   glutMainLoop ( );
}
